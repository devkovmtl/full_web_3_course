{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.8;\r\n\r\n// import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./PriceConverter.sol\";\r\n\r\n// Get funds from users\r\n// Withdraw fund from users\r\n// set a minimum funding value in USD\r\n\r\n// custom error to save gas\r\nerror NotOwner();\r\n\r\ncontract FundMe {\r\n    // now we can use the function of priceconverter on uint256\r\n    using PriceConverter for uint256;\r\n\r\n    // minimum usd we want\r\n    // uint256 public minimumUSD = 50 * 1e18;\r\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\r\n    // keep track of anyone who fund us\r\n    address[] public funders;\r\n    // how much each funders has given\r\n    mapping(address => uint256) public addressToAmountFunded;\r\n\r\n    address public immutable i_owner;\r\n\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    // anybody can call it -> public\r\n    // receive fund -> payable\r\n    function fund() public payable {\r\n        // we want to set a minimum fund amount\r\n        // 1. How to send ETH to this contract\r\n        // require(getConversionRate(msg.value )>= minimumUSD, \"Not enough found\"); // 1e18 = 1 * 10 **18\r\n        require(\r\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\r\n            \"Not enough money\"\r\n        );\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender] += msg.value;\r\n    }\r\n\r\n    // we want to withdraw all the fund from contract\r\n    // reset the funders[] and addressToAmountFunded\r\n    function withdraw() public onlyOwner {\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funder = funders[funderIndex]; // we get the funder address\r\n            addressToAmountFunded[funder] = 0;\r\n        }\r\n\r\n        // reset the array\r\n        funders = new address[](0);\r\n        // withdraw the funds\r\n\r\n        // transfer\r\n        // payable(msg.sender).transfer(address(this).balance);\r\n        // send\r\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n        // require(sendSuccess, \"Send failed\"); // if failed will revert\r\n        // call // lower level command\r\n        // call any function in all of all eth without abi\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // require(msg.sender == i_owner, \"Sender is not owner\");\r\n        if (msg.sender != i_owner) {\r\n            revert NotOwner();\r\n        }\r\n        _; // doing the rest of code\r\n    }\r\n\r\n    // we can add receive() and fallback() just in case somebody\r\n    // send money instead of calling the fund() method\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n// can't  have state\r\n// can't send either\r\nlibrary PriceConverter {\r\n    // get the price of ETH/USD\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        // 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n        // );\r\n        (\r\n            ,\r\n            /*uint80 roundID*/\r\n            int256 price, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\r\n            ,\r\n            ,\r\n\r\n        ) = priceFeed.latestRoundData();\r\n        // price -> ETH in terms of USD // 8 decimals associate with price feed\r\n        // 3000.00000000\r\n        // msg.value will 18 decimals value because 1 eth = 1 * 10 ** 18 wei\r\n        return uint256(price * 1e10); // 1 ** 10 = 10000000000\r\n    }\r\n\r\n    // convert the eth in usd to check agains msg.value\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}